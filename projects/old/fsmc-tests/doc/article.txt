
https://titanwolf.org/Network/Articles/Article?AID=198f4410-66a4-4bee-a263-bfbb244dbc45

Connecting the LCD to the FSMC the STM32

We examined how to connect the LCD to STM32 of FSMC (flexible static memory controller).

Because FSMC is a feature for connecting the SRAM and FLASH to the exterior of the STM32. You can connect the LCD of the parallel connection using the FSMC.

Various people in the past on this matter, has written a lot of articles, but you tried to summarize for your understanding.

Target of the MCU is STM32F103VCT6.
Information of official

    Application Note AN2790 of STM32 " TFT LCD interfacing with the high-density STM32F10xxx FSMC STM32F10xxx FSMC "
    Sample code STM32016
    STM32F103VCT6 of Reference Manual Rev16 English
    Reference Manual Rev11 Japanese of STM32F103VCT6 note that the version is older

STM32F103VCT6 FSMC of

    STM32F103VCT6 does not go out pin only to FSMC signal is partial of the pin is not enough in the package of LQFP100.
    FSMC of the signal that are on the outer pins in LQFP100
        D0-D15, A16-A23, CLK, NOE, NWE, NWAIT, NE1, NADV, NBL0, NBL1
        D0-D15 are data, A16-A23 are addresses, NOE the negative logic output enable, NWE negative logic of the write enable, NE1 is chip select BANK1
        CLK, NADV, NBL0, NBL1 do not use the case of LCD connection.

Set of FSMC

    Settings that are made in the source code for the sample code STM32016 of AN2790

    FSMC timing setting (FSMC_BTR1 register of bank 1)

Field Name
setting value
Description

ACCMOD
0X1 (access mode B)
access mode

DATLAT
0X0 (In the case of asynchronous SRAM do not care)
data latency　

CLKDIV
0X0 (In the case of asynchronous SRAM do not care)
clock division ratio

BUSTURN
0X0 (1 × HCLK period)
bus turnaround phase time

DATAST
0x5 (6 × HCLK period)
data phase period

ADDHLD
0x0 (1 × HCLK period)
address hold phase time

ADDSET
0x1 (2 × HCLK period)
address setup phase time

    SRAM/NOR type flash chip select control register set (FSMC_BCR1 register of bank 1)

Field Name
setting value
Description

CBURSTRW
0X0 (disabled)
write burst enable

ASYNCWAIT
0x0 (not considered)
wait signal during asynchronous transfer

EXTMOD
0X0 (disabled)
Extended Mode Enable

WAITEN
0X0 (disabled)
wait enabled bit

WREN
0X1 (valid)
write enable bit

WAITCFG
0X0 (active in 1 data cycle before the wait state)
Wait Timing Setting

WRAPMOD
0X0 (disabled)
lapped burst mode support

WAITPOL
0x0 (active low)
wait signal polarity bit

BURSTEN
0X0 (disabled)
burst enable bit

FACCEN
0X0 (disabled)
flash access enable

MWID
0X1 (16-bit)
memory data bus width

MTYP
0x0 (SRAM)
memory type

MUXEN
0x0 (not multiplexed)
do not address/data multiplexing enable bit multiplexing

MBKEN
0X1 (effective)
memory bank enable bit Enable
Connection between the LCD

LCD
FSMC
STM32F103VCT6

RESET - 60 PD12   (mistake?? )
              

RS A16 58 PD11   done   command/data A16

CS NE1 88 PD7   done  two pins ???  CS not F_CS which is w25 flash.

RD NOE 85 PD4  done 

WR NWE 86 PD5  done

D0 D0 61 PD14  done

D1 D1 62 PD15  done

D2 D2 81 PD0  done

D3 D3 82 PD1  done

D4 D4 38 PE7  done

D5 D5 39 PE8  done

D6 D6 40 PE9  done

D7 D7 41 PE10  done

D8 D8 42 PE11  done

D9 D9 43 PE12  done

D10 D10 44 PE13  done

D11 D11 45 PE14  done

D12 D12 46 PE15  done

D13 D13 55 PD8  done

D14 D14 56 PD9  done

D15 D15 57 PD10  done


The initial setting example of FSMC

    FSMC initial setting example in the case of using the libopencm3 as a library in STM32F103

#include <libopencm3/stm32/rcc.h>

#include <libopencm3/stm32/gpio.h>

#include <libopencm3/stm32/fsmc.h>

static void fsmc_setup(void)

{

 /* Enable PORTD and PORTE */

  rcc_periph_clock_enable(RCC_GPIOD);

  rcc_periph_clock_enable(RCC_GPIOE);


 /* Enable FSMC */

  rcc_periph_clock_enable(RCC_FSMC);


 /* config FSMC data lines */

  uint16_t portd_gpios = GPIO0 | GPIO1 | GPIO8 | GPIO9 |

                         GPIO10 | GPIO14 | GPIO15;

  gpio_set_mode(GPIOD, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, portd_gpios);


  uint16_t porte_gpios = GPIO7 | GPIO8 | GPIO9 | GPIO10 | 

                         GPIO11 | GPIO12 | GPIO13 | GPIO14 |

                         GPIO15;

  gpio_set_mode(GPIOE, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, porte_gpios);


 /* config FSMC NOE */

  gpio_set_mode(GPIOD, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPUL, GPIO4);


 /* config FSMC NWE */

  gpio_set_mode(GPIOD, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO5);


 /* config FSMC NE1 */

  gpio_set_mode(GPIOD, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO7);


 /* config FSMC A16 for D/C (select Data/Command ) */

  gpio_set_mode(GPIOD, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO11);


 /* config FSMC register */

  FSMC_BTR(0) = FSMC_BTR_ACCMODx(FSMC_BTx_ACCMOD_B) |

                FSMC_BTR_DATLATx(0)  |

                FSMC_BTR_CLKDIVx(0)  |

                FSMC_BTR_BUSTURNx(0) |

                FSMC_BTR_DATASTx(5)  |

                FSMC_BTR_ADDHLDx(0)  |

                FSMC_BTR_ADDSETx(1);


  FSMC_BCR(0) = FSMC_BCR_WREN | FSMC_BCR_MWID | FSMC_BCR_MBKEN;

}
 

Access to the LCD controller

    LCD access structure
        Structures LCD as the output of the RS pin above the connection becomes 0 and 1 arranged in 0X6001FFFE.
        When you access A16 becomes zero in the LCD-> LCD_REG. (Address 0x6001FFFE)
        When you access A16 is 1 in LCD-> LCD_RAM. (Address 0x60020000)

/* Private typedef -----------------------------------------------------------*/
 typedef struct
 {

  __IO uint16_t LCD_REG;

  __IO uint16_t LCD_RAM;
 } LCD_TypeDef;

#define LCD_BASE    ((uint32_t)(0x60000000 | 0x00020000 -2 ) )

#define LCD         ((LCD_TypeDef *) LCD_BASE)
 

    Reading of the register

uint16_t LCD_ReadReg(uint8_t LCD_Reg)
 {

  /* Write 16-bit Index (then Read Reg) */

  LCD->LCD_REG = LCD_Reg;

  /* Read 16-bit Reg */

  return (LCD->LCD_RAM);
 }
 

    Writing to the register

void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
 {

  /* Write 16-bit Index, then Write Reg */

  LCD->LCD_REG = LCD_Reg;

  /* Write 16-bit Reg */

  LCD->LCD_RAM = LCD_RegValue;
 }
 

    Reading of RAM
        RAM is read, because the command is required, different for each controller to be used.

uint16_t LCD_ReadRAM(void)
 {

  /* Write 16-bit Index (then Read Reg) */

  LCD->LCD_REG = R34 /* Select GRAM Reg */

  /* Read 16-bit Reg */

  return LCD->LCD_RAM;
 }
 

    Write to RAM

void LCD_WriteRAM(uint16_t RGB_Code)

{

 /* Write 16-bit GRAM Reg */

  LCD->LCD_RAM = RGB_Code;

}
 

reference

    http://axid.gozaru.jp/tips/tips.html
    http://ameblo.jp/tonsuke-usagi/day-20110309.html
    http://opuct-fukaken.sakura.ne.jp/magic3/index.php?STM32%E3%81%A7%E6%B6%B2%E6%99%B6%E5%88%B6%E5%BE%A1


