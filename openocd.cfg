# This is an STM32F4 discovery board with a single STM32F407VGT6 chip.
# http://www.st.com/internet/evalboard/product/252419.jsp

# nix-shell  ~/devel/nixos-config/examples/arm.nix  -I nixpkgs=/home/me/devel/nixpkgs/
# openocd -f openocd.cfg
# rlwrap nc localhost 4445

#source [find interface/stlink-v2.cfg]
# jun 2022.
source [find interface/stlink.cfg ]


transport select hla_swd

# increase working area to 64KB
set WORKAREASIZE 0x10000

source [find target/stm32f4x.cfg]

# JA
#reset_config srst_only




# 2000 kHz is too fast. for reset handler

$_TARGETNAME configure -event reset-start {
	# Reduce speed since CPU speed will slow down to 16MHz with the reset
	# adapter_khz 2000
  # adapter_khz 1800

  # jun 2022.
  adapter speed 1800
}



proc myflash {} {

  # halt
  reset halt

  # copy out 100 bytes serialized data, from sector 2, ie local offset to 0x08000000
  flash read_bank 0 out.txt  0x08000   100

  # flash firmware, erase/overwrites all sectors
  flash write_image erase unlock  /home/me/devel/stm32/stm32f4/projects/flash-stm32f411ceu/main.elf;

  # Now write data back to sector 2
  flash erase_sector 0 2 2 ;
  flash write_bank 0 out.txt  0x08000

  # restart mcu etc
  # reset run
}


proc myflash2 {} {

  # halt
  reset halt

  # we can specify the offset. but not the size...
  # actually could chop up the main.elf file.

  flash write_image erase unlock  /home/me/devel/stm32/stm32f4/projects/flash-stm32f411ceu/main.elf ;
[erase] [unlock] filename [offset] [type]

  # copy out 100 bytes serialized data, from sector 2, ie local offset to 0x08000000
  flash read_bank 0 out.txt  0x08000   100

  # flash firmware, erase/overwrites all sectors
  flash write_image erase unlock  /home/me/devel/stm32/stm32f4/projects/flash-stm32f411ceu/main.elf;

  # Now write data back to sector 2
  flash erase_sector 0 2 2 ;
  flash write_bank 0 out.txt  0x08000

  # restart mcu etc
  # reset run
}





